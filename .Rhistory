corrmatrix <- cor(trainset %>% select(-KidneyDisease))
corrplot(corrmatrix)
ggplot(trainset, aes(x = factor(KidneyDisease), y = BloodPressure)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Bp factor plot for kidney disease")
corrmatrix <- cor(trainset %>% select(-KidneyDisease))
corrplot(corrmatrix)
ggplot(trainset, aes(x = factor(KidneyDisease), y = BloodPressure)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Bp factor plot for kidney disease")
KidneyData <- read.csv("KidneyData.csv")
attach(KidneyData)
head(KidneyData)
str(KidneyData)
datacleaning <- KidneyData %>%
mutate(Gender = as.numeric(factor(Gender)),
SmokingStatus = as.numeric(factor(SmokingStatus))) %>%
select(-PatientID)
KidneyData <- read.csv("KidneyData.csv")
library(readr)
library(dplyr)
library(caret)
datacleaning <- KidneyData %>%
mutate(Gender = as.numeric(factor(Gender)),
SmokingStatus = as.numeric(factor(SmokingStatus))) %>%
select(-PatientID)
set.seed(55)
trainIndex <- createDataPartition(datacleaning$KidneyDisease, p = .8,
list = FALSE,
times = 1)
trainset <- datacleaning[trainIndex,]
testset <- datacleaning[-trainIndex,]
str(trainset)
library(ggplot2)
library(corrplot)
ggplot(trainset, aes(x = factor(KidneyDisease))) +
geom_bar(fill = "yellow") +
labs(title = "set shown")
geom_boxplot(fill = "lightblue") +
labs(title = "Bp factor plot for kidney disease")
geom_boxplot(fill = "lightblue") +
labs(title = "Bp factor plot for kidney disease")
model <- glm(KidneyDisease ~ ., data = trainset, family = binomial)
summary(model)
binaryprediction <- ifelse(predictions > 0.5, 1, 0)
prediction1 <- predict(model, newdata = testset, type = "response")
confusionMatrix <- table(Predicted = binaryprediction, Actual = kidney_test$KidneyDisease)
binaryprediction <- ifelse(predictions > 0.5, 1, 0)
prediction1 <- predict(model, newdata = testset, type = "response")
confusionMatrix <- table(Predicted = binaryprediction, Actual = testset$KidneyDisease)
print(confusionMatrix)
KidneyData <- read.csv("KidneyData.csv")
attach(KidneyData)
head(KidneyData)
library(reader)
library(readr)
library(dplyr)
library(caret)
datacleaning <- KidneyData %>%
mutate(Gender = as.numeric(factor(Gender)),
SmokingStatus = as.numeric(factor(SmokingStatus))) %>%
select(-PatientID)
set.seed(42)
trainIndex <- createDataPartition(datacleaning$KidneyDisease, p = .8,
list = FALSE,
times = 1)
trainset <- datacleaning[trainIndex,]
testset <- datacleaning[-trainIndex,]
str(trainset)
ggplot(trainset, aes(x = factor(KidneyDisease))) +
geom_bar(fill = "yellow") +
labs(title = "set shown")
ggplot(trainset, aes(x = factor(KidneyDisease), y = BloodPressure)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Bp factor plot for kidney disease")
corrmatrix <- cor(trainset %>% select(-KidneyDisease))
corrplot(corrmatrix, method = "color")
corrmatrix <- cor(trainset %>% select(-KidneyDisease))
corrplot(corrmatrix)
model <- glm(KidneyDisease ~ ., data = trainset, family = binomial)
summary(model)
predictions <- predict(model, newdata = testset, type = "response")
binaryprediction <- ifelse(predictions > 0.5, 1, 0)
prediction1 <- predict(model, newdata = testset, type = "response")
confusionMatrix <- table(Predicted = binaryprediction, Actual = testset$KidneyDisease)
print(confusionMatrix)
str(KidneyData)
library(ISLR)
attach(iris)
summarise(iris)
summary(iris)
summary(iris)
library(ISLR)
attach(iris)
summary(iris)
library(ISLR)
attach(iris)
library(ISLR)
attach(iris)
summary(iris)
library(ISLR)
attach(iris)
summary(iris)
my_list <- list("Hello", 42, TRUE)
x <- 15
if (x %% 3 == 0) {
print("Divisible by 3")
} else {
print("Not divisible by 3")
}
prime_vector <- c(2, 3, 5, 7, 11, 13, 17, 19, 23)
print(prime_vector)
result <- c(TRUE, FALSE) | c(FALSE, TRUE)
print(result)
f_values <- c()
for (x in -10:10) {
if (x < -3) {
f <- (2 * x^2) - (5 * x) - 2
} else {
f <- x^2 + (5 * x) + 1
}
f_values <- c(f_values, f)
}
print(f_values)
x_vals <- -10:10
f_vals <- numeric(length(x_vals))
# Compute f(x) using the given piecewise definition
for (i in seq_along(x_vals)) {
x <- x_vals[i]
if (x < -3) {
f_vals[i] <- 2 * x^2 - 5 * x - 2
} else {
f_vals[i] <- x^2 + 5 * x + 1
}
}
# Print the results
print(data.frame(x = x_vals, f_x = f_vals))
n <- 10
y <- numeric(n)
for (i in 1:n) {
y[i] <- 0.6^i + 0.95^(i-1)
}
print(y)
df <- mtcars
# Assuming V9 means the 9th column
y <- sum(df[[9]])
print(y)
v <- c("dog", "cat", "chicken", "rabbit", "cow", "horse")
m <- matrix(1:20, nrow = 4, ncol = 5)
l <- list(
list(method = "knn", repetitions = 40, accuracy = 0.67, std_err = 0.04),
list(method = "svm", repetitions = 20, accuracy = 0.78, std_err = 0.12)
)
d <- data.frame(
country = c("Australia", "New Zealand", "India"),
battingAverage = c(25.6, 24.8, 29.3),
bowlingAverage = c(22.1, 21.6, 25.2)
)
# a)
element <- m[2, 5]
print(element)
# b) Print 1st and 3rd elements of vector
print(v[c(1, 3)])
# c) Print second element of list
print(l[[2]])
# d) Print third row of dataframe
print(d[3, ])
print(l[[2]])
print(v[c(1, 3)])
basic <- function(x) {
return(4 * x^2 + x + 5)
}
print(basic(2))
default <- function(x, y = FALSE) {
if (y) {
return(1 * x + 3 * x)
} else {
return(1)
}
}
print(default(4, TRUE))  # Example: returns 4 + 12 = 16
print(default(4))
prime_vector <- c(2, 3, 5, 7, 11, 13, 17, 19, 23)
print(prime_vector)
basic <- function(x) {
return(4 * x^2 + x + 5)
}
print(basic(2))
default <- function(x, y = FALSE) {
if (y) {
return(1 * x + 3 * x)
} else {
return(1)
}
}
print(default(4, TRUE))
print(default(4))
basic <- function(x) {
return(4 * x^2 + x + 5)
}
print(basic(2))
library(DBI)
library(tidyverse)
library(nycflights13)
install.packages(nycflights13)
install.packages(DBI)
library("DBI")
library(nycflights13)
library("DBI")
library(tidyverse)
library(nycflights13)
library(nycflights13)
flights %>% filter(dep_delay > 600) %>%
select(year, month, day, dep_delay)
installed.packages("nycflights13")
library(nycflights13)
packageDescription("nycflights13")
install.packages("nycflights13")
library(nycflights13)
packageDescription("nycflights13")
flights %>% filter(dep_delay > 600) %>%
select(year, month, day, dep_delay)
weather %>% filter(temp > 100) %>%
select(temp, humid)
head(flights, 100)     # First 100 rows
weather %>% filter(temp > 100) %>%
select(temp, humid)
head(weather, 100)     # First 100 rows
data()
data(package='nycflights13')
data(package="nycflights13")
airlines%<% filter(carrier="WN") %<% select(name)
airlines%>% filter(carrier="WN") %>% select(name)
airlines%>% filter(carrier=="WN") %>% select(name)
head(airlines, 100)     # First 100 rows
airlines%>% filter(carrier=="WN") %>% select(name,carrier)
head(planes, 100)     # First 100 rows
planes %>% filter((engines == 4) & (manufacturer == "BOEING")) %>%
select(tailnum,year)
planes %>% filter((engines == 4) & (manufacturer == "Embraer")) %>%
planes %>% filter((engines == 4) & (manufacturer == "EMBRAER")) %>%
select(tailnum,year)
planes %>% filter((engines == 4) & (manufacturer == "BOEING")) %>%
select(tailnum,year)
planes %>% filter((engines == 4) & (manufacturer == "EMBRAER")) %>%
select(tailnum,year)
tail(flights, 100)     # Last 100 rows
head(airlines, 100)     # First 100 rows
hot_flight_manufacturers <- flights %>%
inner_join(weather, by = c("year", "month", "day", "hour", "origin")) %>%
filter(temp > 100) %>%   # temperature in Fahrenheit
inner_join(planes, by = "tailnum") %>%
select(flight, tailnum, temp, manufacturer) %>%
distinct()
# View result
print(hot_flight_manufacturers)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
# Step 2: Define the function to extract rows with Age between 39 and 66 inclusive
extractRows <- function(df) {
extractRows <- function(df) {
# se subset or logical indexing to filter the rows based on Age condition
filtered_df <- df[df$Age >= 39 & df$Age <= 66, ]
return(filtered_df)
result <- extractRows(data)
print("Filtered rows where Age is between 39 and 66:")
print(result)
# Step 1: Create the data frame
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
#Step 2: Define the function to extract rows with Age between 39 and 66 inclusive
extractRows <- function(df) {
# se subset or logical indexing to filter the rows based on Age condition
filtered_df <- df[df$Age >= 39 & df$Age <= 66, ]
return(filtered_df)
}
# Step 3: Call the function on the created data and display result
result <- extractRows(data)
print("Filtered rows where Age is between 39 and 66:")
print(result)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
extractRows <- function(df) {
# Logical filter for Age between 39 and 66
result <- subset(df, Age >= 39 & Age <= 66)
return(result)
filtered_data <- extractRows(data)
print("Filtered rows where Age is between 39 and 66 inclusive:")
print(filtered_data)
print("Filtered rows where Age is between 39 and 66 inclusive:")
print(filtered_data)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
# Function to extract rows where Age is between 39 and 66 (inclusive)
extractRows <- function(df) {
extractRows <- function(df) {
# Logical filter for Age between 39 and 66
result <- subset(df, Age >= 39 & Age <= 66)
return(result)
filtered_data <- extractRows(data)
print("Filtered rows where Age is between 39 and 66 inclusive:")
print(filtered_data)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
extractRows <- function(df) {
extractRows <- function(df) {
result <- subset(df, Age >= 39 & Age <= 66)
return(result)
}
filtered_data <- extractRows(data)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
extractRows <- function(df) {
result <- subset(df, Age >= 39 & Age <= 66)
return(result)
}
filtered_data <- extractRows(data)
print("Filtered rows where Age is between 39 and 66 inclusive:")
print(filtered_data)
extractRatioRows <- function(df) {
# Calculate Study/Promotion ratio
ratio <- df$Study / df$Promotion
result <- df[ratio > 0.91, ]
filtered_data <- extractRatioRows(data)
print("Filtered rows where Study/Promotion > 0.91:")
print(filtered_data)
extractRatioRows <- function(df) {
# Calculate Study/Promotion ratio
ratio <- df$Study / df$Promotion
# Filter rows where the ratio > 0.91
result <- df[ratio > 0.91, ]
return(result)
}
filtered_data <- extractRatioRows(data)
print("Filtered rows where Study/Promotion > 0.91:")
print(filtered_data)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
# Step 2: Define the function
extractRatioRows <- function(df) {
# Calculate Study/Promotion ratio
ratio <- df$Study / df$Promotion
# Filter rows where the ratio > 0.91
result <- df[ratio > 0.91, ]
return(result)
}
filtered_data <- extractRatioRows(data)
print("Filtered rows where Study/Promotion > 0.91:")
print(filtered_data)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
extractRows <- function(df) {
result <- subset(df, Age >= 39 & Age <= 66)
return(result)
}
filtered_data <- extractRows(data)
print("Filtered rows where Age is between 39 and 66 inclusive:")
print(filtered_data)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
extractRows <- function(df) {
df[df$Study / df$Promotion > 0.91, ]
}
filtered <- extractRows(data)
print("Filtered:")
print(filtered)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
#function extractRows to extract data where Age is between 39 and 66
extractRows <- function(df) {
result <- subset(df, Age >= 39 & Age <= 66)
return(result)
}
#function call
filtered_data <- extractRows(data)
#printing result
print("Filtered rows where Age is between 39 and 66 inclusive:")
print(filtered_data)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
extractRows <- function(df) {
df[df$Study / df$Promotion > 0.91, ]
}
filtered <- extractRows(data)
print("Filtered:")
print(filtered)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
extractProRatioRows <- function(df) {
df[df$Study / df$Promotion > 0.91, ]
}
filtered <- extractProRatioRows(data)
print("Filtered:")
print(filtered)
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
rowNumber <- function(df) {
difference <- df$Service - df$Study
# Find the index (row number) of the maximum difference
row_num <- which.max(difference)
return(row_num)
}
max_diff_row <- rowNumber(data)
print(paste("Row number with max(Service - Study) is:", max_diff_row))
data <- data.frame(
Age = c(45, 60, 30, 70, 39, 50, 66, 25),
Service = c(10, 8.5, 4, 7, 9, 6, 7.2, 5),
Study = c(10, 9.2, 4.5, 8, 9.8, 6, 7.5, 6),
Promotion = c(5, 3, 2, 1, 4, 6, 3, 2)
)
deepMean <- function(df) {
#filtering rows where Age is greater than 39
filtered_df <- df[df$Age > 39, ]
# mean of the Service column for the filtered rows
mean_service <- mean(filtered_df$Service)
return(mean_service)
}
mean_service_result <- deepMean(data)
print(paste("Mean Service (only for Age > 39):", mean_service_result))
```{r load-data}
data(mtcars)
str(mtcars)
summary(mtcars)
#boxplot of mpg across different cylinder counts
boxplot(mpg ~ as.factor(cyl),
data = mtcars,
main = "Miles per Gallon (MPG) by Number of Cylinders",
xlab = "Number of Cylinders",
ylab = "Miles per Gallon",
col = c("lightblue", "lightgreen", "salmon"),
border = "black")
#scatter plot of mpg vs hp
plot(mtcars$mpg, mtcars$hp,
main = "Scatter Plot of Horsepower vs MPG",
xlab = "Miles Per Gallon (MPG)",
ylab = "Horsepower (HP)",
pch = 19,                 # Solid circle point
col = "darkblue")         # Point color
# adding regression line
abline(lm(hp ~ mpg, data = mtcars), col = "red", lwd = 2)
#frequency table of the number of cylinders
cyl_counts <- table(mtcars$cyl)
barplot(cyl_counts,
main = "Number of Cars by Cylinder Count",
xlab = "Number of Cylinders",
ylab = "Count of Cars",
col = c("lightblue", "lightgreen", "salmon"),
border = "black")
install.packages("rmarkdown")
library(rmarkdown)
rmarkdown::render("your_file.Rmd", output_format = "word_document")
rmarkdown::render("mranalysis.Rmd", output_format = "word_document")
rmarkdown::render("C:\Users\Asus\OneDrive\Documents\Data science\mranalysis.rmd",
rmarkdown::render("C:/Users/Asus/OneDrive/Documents/Data science/mranalysis.rmd",
output_format = "word_document")
rmarkdown::render("C:/Users/Asus/OneDrive/Documents/Data science/mranalysis.rmd",
output_format = "word_document")
rmarkdown::render("C:/Users/Asus/OneDrive/Documents/Data science/mranalysis.rmd",
output_format = "word_document")
rmarkdown::render("C:/Users/Asus/OneDrive/Documents/Data science/mranalysis.rmd",
output_format = "word_document")
rmarkdown::render("C:/Users/Asus/OneDrive/Documents/Data science/mranalysis.rmd",
output_format = "word_document")
